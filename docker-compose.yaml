version: "3"

networks:
  confluent:
    driver: bridge
services:
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 10
    networks:
      - confluent

  broker:
    image: confluentinc/cp-kafka:latest
    #image: apache/kafka:3.8.0
    hostname: broker
    container_name: broker
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      #KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:29092,PLAINTEXT_HOST://localhost:9092
      #KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:9092 , PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://broker:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_CONFLUENT_LICENSE_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_CONFLUENT_BALANCER_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    healthcheck:
      test: [ "CMD", "bash", "-c", 'nc -z localhost 9092' ]
      interval: 10s
      timeout: 10s
      retries: 10
    networks:
      - confluent

  schema-registry:
    image: confluentinc/cp-schema-registry:latest
    hostname: schema-registry
    container_name: schema-registry
    depends_on:
      broker:
        condition: service_healthy
    ports:
      - "8082:8082"
    environment:
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: "broker:29092"
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8082
    networks:
      - confluent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8082/"]
      interval: 30s
      timeout: 10s
      retries: 10

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    hostname: control-center
    container_name: control-center
    depends_on:
      broker:
        condition: service_healthy
      schema-registry:
        condition: service_healthy
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: "broker:29092"
      CONTROL_CENTER_SCHEMA_REGISTRY_URL: "http://schema-registry:8081"
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_INTERNAL_TOPICS_PARTITIONS: 1
      CONTROL_CENTER_MONITORING_INTERCEPTOR_TOPIC_PARTITIONS: 1
      CONFLUENT_METRICS_TOPIC_REPLICATION: 1
      CONFLIENT_METRICS_ENABLE: "false"
      PORT: 9021
    networks:
      - confluent
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9021/health"]
      interval: 30s
      timeout: 10s
      retries: 10
  
  jobmanager:
    image: flink:1.19.1-scala_2.12-java8
    ports:
      - "8081:8081"
    command: jobmanager
    deploy:
      resources:
        limits:
          cpus: "2.1"
          memory: "4.1g"
        reservations:
          cpus: "2"
          memory: "4g"

  taskmanager:
    image: flink:1.19.1-scala_2.12-java8
    depends_on:
      - jobmanager
    environment:
      - TASK_MANAGER_NUMBER_OF_TASK_SLOTS=4
    links:
      - jobmanager:jobmanager
    command: taskmanager
    deploy:
      replicas: 3
      resources:
        limits:
          cpus: "4.0"
          memory: "4g"
        reservations:
          cpus: "2.5"
          memory: "3g"

  elasticsearch:
   image: docker.elastic.co/elasticsearch/elasticsearch:8.11.1
   container_name: es-container
   environment:
     - xpack.security.enabled=false
     - discovery.type=single-node
   ports:
     - 9200:9200  

  kibana:
    container_name: kb-container
    image: docker.elastic.co/kibana/kibana:8.11.1
    environment:
      - ELASTICSEARCH_HOSTS=http://es-container:9200
    depends_on:
     - elasticsearch
    ports:
     - 5601:5601

















  # python:
  #   image: python:3.9.19-bookworm
  #   container_name: python
  #   hostname: python
  #   ports: 
  #   - "5000:5000"

  # spark-master:
  #  image: bitnami/spark:latest
  #  #This command is necessary for official spark image
  #  #command: bin/spark-class org.apache.spark.deploy.master.Master
  #  ports:
  #    - "9090:8080"
  #    - "7077:7077"
  #  networks:
  #    - confluent
  
  # spark-worker:
  #  image: bitnami/spark:latest
  #  #command: bin/spark-class org.apache.spark.deploy.worker.Worker spark://spark-master:7077
  #  depends_on:
  #    - spark-master
  #  environment:
  #    SPARK_MODE: worker
  #    SPARK_WORKER_CORES: 2
  #    SPARK_WORKER_MEMORY: 1g
  #    SPARK_MASTER_URL: spark://spark-master:7077
  #  networks:
  #    - confluent